{"version":3,"sources":["constants.ts","index.tsx"],"names":["mailbox","mailbox64","data","color","hash","name","slide","offset","move","startingPosition","initRNGTable","table","i","push","j","Math","floor","random","hashSeeds","extraSeeds","Array","from","length","Piece","props","display","className","Square","onClick","style","backgroundColor","value","ReadOnlySquare","fontSize","Board","useState","selected","setSelected","board","fill","currentBoard","setCurrentBoard","colors","setColor","pieceStates","setPieceStates","square","piece","promotion","setPromotion","enPassantSquare","setEnPassantSquare","halfClock","setHalfClock","turn","setTurn","gameState","setGameState","legalMoves","setLegalMoves","castleAvailable","setCastleAvailable","history","setHistory","executeMove","useCallback","pieceNumber","startSquare","finalSquare","type","slice","castle","pieces","enPassant","result","indexOf","direction","hashMove","iterable","realizeMove","hashedMove","copy","generateMoves","piecePosition","moves","enemy","pieceID","n","m","inDanger","Object","entries","trimMoves","filter","position","wKing","bKing","showLegalSquares","target","p","legals","checkEndGame","useMemo","allMovesAvailable","repeat","handleClick","handleClickPromote","promoting","renderSquare","legal","renderPromoteSquare","useEffect","player","gameOverStatus","squares","row","fullRow","String","columns","c","cSquare","promotePieces","align","borderCollapse","Game","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.037f1ece.chunk.js","sourcesContent":["\r\n//mailbox from https://www.chessprogramming.org/10x12_Board\r\nexport const mailbox = [\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1,  0,  1,  2,  3,  4,  5,  6,  7, -1,\r\n  -1,  8,  9, 10, 11, 12, 13, 14, 15, -1,\r\n  -1, 16, 17, 18, 19, 20, 21, 22, 23, -1,\r\n  -1, 24, 25, 26, 27, 28, 29, 30, 31, -1,\r\n  -1, 32, 33, 34, 35, 36, 37, 38, 39, -1,\r\n  -1, 40, 41, 42, 43, 44, 45, 46, 47, -1,\r\n  -1, 48, 49, 50, 51, 52, 53, 54, 55, -1,\r\n  -1, 56, 57, 58, 59, 60, 61, 62, 63, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\r\n  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1\r\n]\r\n\r\nexport const mailbox64 = [\r\n  21, 22, 23, 24, 25, 26, 27, 28,\r\n  31, 32, 33, 34, 35, 36, 37, 38,\r\n  41, 42, 43, 44, 45, 46, 47, 48,\r\n  51, 52, 53, 54, 55, 56, 57, 58,\r\n  61, 62, 63, 64, 65, 66, 67, 68,\r\n  71, 72, 73, 74, 75, 76, 77, 78,\r\n  81, 82, 83, 84, 85, 86, 87, 88,\r\n  91, 92, 93, 94, 95, 96, 97, 98\r\n]\r\n\r\nexport const data = {\r\n  '\\u2659':{ color: 1, hash: 0, name:  '', slide: false, offset: [ -9, -11 ], move: -10}, /* PAWN */\r\n  '\\u2658':{ color: 1, hash: 1, name: 'N', slide: false, offset: [ -21, -19,-12, -8, 8, 12, 19, 21 ], /* KNIGHT */ },\r\n  '\\u2657':{ color: 1, hash: 2, name: 'B', slide: true,  offset: [ -11,  -9,  9, 11 ], /* BISHOP */ },\r\n  '\\u2656':{ color: 1, hash: 3, name: 'R', slide: true,  offset: [ -10,  -1,  1, 10 ], /* ROOK */ },\r\n  '\\u2655':{ color: 1, hash: 4, name: 'Q', slide: true,  offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ], /* QUEEN */ },\r\n  '\\u2654':{ color: 1, hash: 5, name: 'K', slide: false, offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ],  /* KING */ },\r\n  //black pieces\r\n  '\\u265f':{ color: 2, hash: 6, name:  '', slide: false, offset: [ 9, 11 ], move: 10}, /* PAWN */\r\n  '\\u265e':{ color: 2, hash: 7, name: 'N', slide: false, offset: [ -21, -19,-12, -8, 8, 12, 19, 21 ], /* KNIGHT */},\r\n  '\\u265d':{ color: 2, hash: 8, name: 'B', slide: true,  offset: [ -11,  -9,  9, 11 ], /* BISHOP */},\r\n  '\\u265c':{ color: 2, hash: 9, name: 'R', slide: true,  offset: [ -10,  -1,  1, 10 ], /* ROOK */},\r\n  '\\u265b':{ color: 2, hash: 10,name: 'Q', slide: true,  offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ], /* QUEEN */},\r\n  '\\u265a':{ color: 2, hash: 11,name: 'K', slide: false, offset: [ -11, -10, -9, -1, 1,  9, 10, 11 ]  /* KING */},\r\n}\r\n\r\nexport const startingPosition = [\r\n  48, 49, 50, 51, 52, 53, 54, 55,\r\n  56, 57, 58, 59, 60, 61, 62, 63,//white\r\n  8,  9, 10, 11, 12, 13, 14, 15,\r\n  0,  1,  2,  3,  4,  5,  6,  7//black\r\n]\r\n\r\n//initialize a table of hashes for a modified Zobrist hashing\r\n//https://www.chessprogramming.org/Zobrist_Hashing\r\n//64x12 hash\r\nconst initRNGTable = () => {\r\n  const table: number[][] = []\r\n  for (let i = 0; i < 64; ++i) {\r\n    table.push([])\r\n    for (let j = 0; j < 12; ++j) {\r\n      table[i].push(Math.floor(Math.random() * 2 ** 32))\r\n    }\r\n  }\r\n  return table\r\n}\r\n\r\nexport const hashSeeds = [initRNGTable(), initRNGTable()] //hashing table position for game draw check\r\nexport const extraSeeds = Array.from({ length: 6 }, () =>\r\n  Math.floor(Math.random() * 2 ** 32)\r\n) //for hashing other data\r\n//seed 0-3 is for castling, seed 4 for turn player, seed 5 for en passant","import React, { useState, useEffect, useCallback, useMemo } from \"react\"\r\nimport \"./index.css\"\r\nimport \"chess-merida-font/css/chessmerida-webfont.css\"\r\n\r\nimport { mailbox, mailbox64, data, startingPosition, hashSeeds, extraSeeds } from \"./constants\"\r\nimport ReactDOM from \"react-dom/client\"\r\n\r\nconst Piece = (props: { display: string | null }) => {\r\n  let display\r\n  switch (props.display) {\r\n    case \"\\u2654\":\r\n      display = \"cm cm-w-king\"\r\n      break\r\n    case \"\\u2655\":\r\n      display = \"cm cm-w-queen\"\r\n      break\r\n    case \"\\u2656\":\r\n      display = \"cm cm-w-rook\"\r\n      break\r\n    case \"\\u2657\":\r\n      display = \"cm cm-w-bishop\"\r\n      break\r\n    case \"\\u2658\":\r\n      display = \"cm cm-w-knight\"\r\n      break\r\n    case \"\\u2659\":\r\n      display = \"cm cm-w-pawn\"\r\n      break\r\n    case \"\\u265a\":\r\n      display = \"cm cm-b-king\"\r\n      break\r\n    case \"\\u265b\":\r\n      display = \"cm cm-b-queen\"\r\n      break\r\n    case \"\\u265c\":\r\n      display = \"cm cm-b-rook\"\r\n      break\r\n    case \"\\u265d\":\r\n      display = \"cm cm-b-bishop\"\r\n      break\r\n    case \"\\u265e\":\r\n      display = \"cm cm-b-knight\"\r\n      break\r\n    case \"\\u265f\":\r\n      display = \"cm cm-b-pawn\"\r\n      break\r\n    default:\r\n      break\r\n  }\r\n  return <i className={display} aria-hidden=\"true\" />\r\n}\r\n\r\nconst Square = (props: {\r\n  onClick: (e: React.MouseEvent) => void\r\n  color: string\r\n  value: string | null\r\n}) => {\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      onClick={props.onClick}\r\n      style={{ backgroundColor: props.color }}\r\n    >\r\n      <Piece display={props.value} />\r\n    </button>\r\n  )\r\n}\r\n\r\nconst ReadOnlySquare = (props: { value: string }) => {\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      style={{ backgroundColor: \"#fff\", fontSize: \"12px\" }}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n\r\nconst Board = () => {\r\n  const [selected, setSelected] = useState(-1)\r\n  const [currentBoard, setCurrentBoard] = useState<\r\n    (keyof typeof data | null)[]\r\n  >(() => {\r\n    const board = Array(64).fill(null)\r\n    board[63] = \"\\u2656\"\r\n    board[62] = \"\\u2658\"\r\n    board[61] = \"\\u2657\"\r\n    board[60] = \"\\u2654\"\r\n    board[59] = \"\\u2655\"\r\n    board[58] = \"\\u2657\"\r\n    board[57] = \"\\u2658\"\r\n    board[56] = \"\\u2656\"\r\n    board[55] = \"\\u2659\"\r\n    board[54] = \"\\u2659\"\r\n    board[53] = \"\\u2659\"\r\n    board[52] = \"\\u2659\"\r\n    board[51] = \"\\u2659\"\r\n    board[50] = \"\\u2659\"\r\n    board[49] = \"\\u2659\"\r\n    board[48] = \"\\u2659\"\r\n\r\n    board[0] = \"\\u265c\"\r\n    board[1] = \"\\u265e\"\r\n    board[2] = \"\\u265d\"\r\n    board[3] = \"\\u265b\"\r\n    board[4] = \"\\u265a\"\r\n    board[5] = \"\\u265d\"\r\n    board[6] = \"\\u265e\"\r\n    board[7] = \"\\u265c\"\r\n    board[8] = \"\\u265f\"\r\n    board[9] = \"\\u265f\"\r\n    board[10] = \"\\u265f\"\r\n    board[11] = \"\\u265f\"\r\n    board[12] = \"\\u265f\"\r\n    board[13] = \"\\u265f\"\r\n    board[14] = \"\\u265f\"\r\n    board[15] = \"\\u265f\"\r\n    return board\r\n  })\r\n  const [color, setColor] = useState<(number | null)[]>(() => {\r\n    const colors = Array(64).fill(null)\r\n    for (let i = 0; i < 8; ++i) {\r\n      colors[i + 48] = 1\r\n      colors[i + 56] = 1\r\n      colors[i + 8] = 2\r\n      colors[i] = 2\r\n    }\r\n    return colors\r\n  })\r\n  const [pieceStates, setPieceStates] = useState(startingPosition)\r\n  const [promotion, setPromotion] = useState<{\r\n    square: number\r\n    piece: null | string\r\n  }>({ square: -1, piece: null })\r\n  const [enPassantSquare, setEnPassantSquare] = useState(-1)\r\n\r\n  const [halfClock, setHalfClock] = useState(0)\r\n  const [turn, setTurn] = useState(true)\r\n  const [gameState, setGameState] = useState(0)\r\n  const [legalMoves, setLegalMoves] = useState(Array(64).fill(0))\r\n  const [castleAvailable, setCastleAvailable] = useState([\r\n    true,\r\n    true,\r\n    true,\r\n    true,\r\n  ])\r\n  const [history, setHistory] = useState<number[][]>(() => {\r\n    const hash = [0, 0]\r\n    for (let i = 0; i < currentBoard.length; ++i) {\r\n      if (currentBoard[i] !== null) {\r\n        const j = data[currentBoard[i] as keyof typeof data].hash\r\n        hash[0] ^= hashSeeds[0][i][j]\r\n        hash[1] ^= hashSeeds[1][i][j]\r\n      }\r\n    }\r\n    return [hash]\r\n  })\r\n\r\n  //does not check if move is legal\r\n  //returns the resulting position\r\n  const executeMove = useCallback(\r\n    (\r\n      pieceNumber: number,\r\n      startSquare: number,\r\n      finalSquare: number,\r\n      type: number\r\n    ) => {\r\n      const board = currentBoard.slice()\r\n      const colors = color.slice()\r\n      const castle = castleAvailable.slice()\r\n      const pieces = pieceStates.slice()\r\n      let enPassant = -1\r\n      let promotion = { square: -1, piece: null }\r\n\r\n      const result = { board, colors, castle, pieces, enPassant, promotion }\r\n\r\n      if (board[finalSquare] !== null) {\r\n        pieces[pieces.indexOf(finalSquare)] = -1 //piece is captured.\r\n      }\r\n\r\n      pieces[pieceNumber] = finalSquare\r\n      board[finalSquare] = board[startSquare]\r\n      board[startSquare] = null\r\n      colors[finalSquare] = colors[startSquare]\r\n      colors[startSquare] = null\r\n\r\n      if (type < 0) enPassant = -type\r\n\r\n      if (type < 3) {\r\n        castle[0] = castle[0] && startSquare !== 56 && startSquare !== 60 //left white rook moved or white king moved\r\n        castle[1] = castle[1] && startSquare !== 63 && startSquare !== 60 //right white rook moved or white king moved\r\n        castle[2] = castle[2] && startSquare !== 0 && startSquare !== 4 //left black rook moved or black king moved\r\n        castle[3] = castle[3] && startSquare !== 7 && startSquare !== 4 //right white rook moved or black king moved\r\n      } else if (type === 3) {\r\n        //en passant capture\r\n        const direction =\r\n          finalSquare > startSquare\r\n            ? finalSquare - startSquare - 8\r\n            : finalSquare - startSquare + 8\r\n        pieces[pieces.indexOf(startSquare + direction)] = -1\r\n        board[startSquare + direction] = null\r\n        colors[startSquare + direction] = null\r\n      } else if (type < 8) {\r\n        //castling, hard coded\r\n        castle[type - 4] = false //disable the type of castling we just did\r\n        switch (type) {\r\n          case 4: //0-0-0\r\n            castle[1] = false //disable the other way of castling (can't castle long after castling short, and vice versa)\r\n            pieces[8] = 59\r\n            board[59] = board[56]\r\n            colors[59] = colors[56]\r\n            board[56] = null\r\n            colors[56] = null //these 5 lines are just moving the rook\r\n            break\r\n          case 5: //0-0\r\n            castle[0] = false\r\n            pieces[15] = 61\r\n            board[61] = board[63]\r\n            colors[61] = colors[63]\r\n            board[63] = null\r\n            colors[63] = null\r\n            break\r\n          case 6: //...0-0-0\r\n            castle[3] = false\r\n            pieces[24] = 3\r\n            board[3] = board[0]\r\n            colors[3] = colors[0]\r\n            board[0] = null\r\n            colors[0] = null\r\n            break\r\n          case 7: //...0-0\r\n            castle[2] = false\r\n            pieces[31] = 5\r\n            board[5] = board[7]\r\n            colors[5] = colors[7]\r\n            board[7] = null\r\n            colors[7] = null\r\n            break\r\n          default: //do nothing\r\n        }\r\n      } else {\r\n        //promotion\r\n        promotion.square = finalSquare\r\n      }\r\n      return result\r\n    },\r\n    [currentBoard, color, castleAvailable, pieceStates]\r\n  )\r\n\r\n  //use 2 32-bit hashes for the board instead of 1 64-bit hash because Javascript Number stops at 53 bit\r\n  const hashMove = useCallback(\r\n    (startSquare: number, finalSquare: number) => {\r\n      const iterable = history[history.length - 1].slice()\r\n      const board = currentBoard\r\n      for (let i = 0; i < 2; ++i) {\r\n        if (board[finalSquare] !== null)\r\n          iterable[i] ^=\r\n            hashSeeds[i][finalSquare][\r\n              data[board[finalSquare] as keyof typeof data].hash\r\n            ] //remove captured piece if any\r\n        iterable[i] ^=\r\n          hashSeeds[i][startSquare][\r\n            data[board[startSquare] as keyof typeof data].hash\r\n          ] //moving\r\n        iterable[i] ^=\r\n          hashSeeds[i][finalSquare][\r\n            data[board[startSquare] as keyof typeof data].hash\r\n          ]\r\n        for (let j = 0; j < castleAvailable.length; ++j) {\r\n          iterable[i] ^= (castleAvailable[j] && extraSeeds[j]) as number\r\n        }\r\n        iterable[i] ^= extraSeeds[4]\r\n        iterable[i] ^= extraSeeds[5] * enPassantSquare\r\n      }\r\n      return iterable\r\n    },\r\n    [history, castleAvailable, currentBoard, enPassantSquare]\r\n  )\r\n\r\n  const realizeMove = useCallback(\r\n    (\r\n      pieceNumber: number,\r\n      startSquare: number,\r\n      finalSquare: number,\r\n      type: number\r\n    ) => {\r\n      const hashedMove = hashMove(startSquare, finalSquare)\r\n      setHistory((history) => {\r\n        const copy = history.slice()\r\n        copy.push(hashedMove)\r\n        return copy\r\n      })\r\n      return executeMove(pieceNumber, startSquare, finalSquare, type)\r\n    },\r\n    [hashMove, executeMove]\r\n  )\r\n\r\n  //generates pseudo-legal moves (moves that the pieces could make, but not necessarily results in a legal position)\r\n  const generateMoves = useCallback(\r\n    (piecePosition: number) => {\r\n      const pieces = pieceStates\r\n      const i = pieces[piecePosition]\r\n      let moves: number[][] = [] //array of [piecePosition, startSquare, finalSquare, moveType]\r\n      if (i === -1) return moves\r\n      const board = currentBoard\r\n      const colors = color\r\n      const enemy = colors[i] === 1 ? 2 : 1\r\n      const pieceID = board[i]\r\n      const piece = data[pieceID as keyof typeof data]\r\n      if (piece.name) {\r\n        //non-pawns\r\n        for (const offset of piece.offset) {\r\n          for (let n = i; ; ) {\r\n            n = mailbox[mailbox64[n] + offset]\r\n            if (n === -1) break /* outside board */\r\n            if (colors[n] !== null) {\r\n              if (colors[n] === enemy)\r\n                moves.push([piecePosition, i, n, 2]) /* capture from i to n */\r\n              break\r\n            }\r\n            moves.push([piecePosition, i, n, 1]) /* quiet move from i to n */\r\n            if (!piece.slide) break /* next direction */\r\n          }\r\n        }\r\n      } else {\r\n        //pawns have custom behaviour\r\n        for (const offset of piece.offset) {\r\n          //capturing diagonally forward\r\n          let n = i\r\n          n = mailbox[mailbox64[n] + offset]\r\n          if (n !== -1 && colors[n] === enemy) {\r\n            if ((n <= 7 && n >= 0) || (n <= 63 && n >= 56)) {\r\n              //pawns reaching last rank must promote\r\n              moves.push([piecePosition, i, n, 9])\r\n            } else moves.push([piecePosition, i, n, 2])\r\n          } else if (n !== -1 && enPassantSquare === n) {\r\n            //captures en passant\r\n            moves.push([piecePosition, i, n, 3])\r\n          }\r\n        }\r\n        const n = mailbox[mailbox64[i] + (piece as { move: number }).move] //moving forward\r\n        if (colors[n] === null) {\r\n          if ((n <= 7 && n >= 0) || (n <= 63 && n >= 56)) {\r\n            //pawns reaching last rank must promote\r\n            moves.push([piecePosition, i, n, 8])\r\n          } else {\r\n            moves.push([piecePosition, i, n, 1])\r\n            if (\r\n              (n <= 23 && n >= 16 && colors[i] === 2) ||\r\n              (n <= 47 && n >= 40 && colors[i] === 1)\r\n            ) {\r\n              //if the piece could land on the 3rd/6th rank, it must have started from the origin\r\n              const m = mailbox[mailbox64[n] + (piece as { move: number }).move]\r\n              if (colors[m] === null) {\r\n                moves.push([piecePosition, i, m, -n]) //type carries information required for en passant\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (pieceID === \"\\u2654\") {\r\n        //castling, hard coded checks\r\n        if (\r\n          castleAvailable[0] &&\r\n          board[57] === null &&\r\n          board[58] === null &&\r\n          board[59] === null\r\n        ) {\r\n          moves.push([piecePosition, i, i - 2, 4])\r\n        }\r\n        if (castleAvailable[1] && board[61] === null && board[62] === null) {\r\n          moves.push([piecePosition, i, i + 2, 5])\r\n        }\r\n      } else if (pieceID === \"\\u265a\") {\r\n        if (\r\n          castleAvailable[2] &&\r\n          board[1] === null &&\r\n          board[2] === null &&\r\n          board[3] === null\r\n        ) {\r\n          moves.push([piecePosition, i, i - 2, 6])\r\n        }\r\n        if (castleAvailable[3] && board[5] === null && board[6] === null) {\r\n          moves.push([piecePosition, i, i + 2, 7])\r\n        }\r\n      }\r\n      return moves\r\n    },\r\n    [pieceStates, currentBoard, castleAvailable, enPassantSquare, color]\r\n  )\r\n\r\n  //check if square is being attacked\r\n  //0 is not attacked\r\n  //1 is attacked by white\r\n  //2 is attacked by black\r\n  //3 is attacked by both\r\n  const inDanger = useCallback((i: number, board: (string | null)[]) => {\r\n    let result = 0\r\n    for (const [pieceID, piece] of Object.entries(data)) {\r\n      for (const offset of piece.offset) {\r\n        //if a piece of the same color can already capture square i, skip this piece\r\n        if (piece.color & result) continue\r\n        for (let n = i; ; ) {\r\n          n = mailbox[mailbox64[n] - offset] //reversed offset for calculating backwards, only relevant for pawns\r\n          if (n === -1) break /* outside board */\r\n          if (board[n] === pieceID) {\r\n            result |= piece.color\r\n            break\r\n          } else if (board[n]) break //ray cast stops when a piece is found\r\n          if (!piece.slide) break /* next direction */\r\n        }\r\n      }\r\n    }\r\n    return result\r\n  }, [])\r\n\r\n  //take moves generated by generateMoves and remove illegal ones\r\n  const trimMoves = useCallback(\r\n    (moves: number[][]) => {\r\n      return moves.filter((move) => {\r\n        if ((move[0] < 16) !== turn) return false\r\n        switch (move[3]) {\r\n          case 4:\r\n            return (\r\n              !(inDanger(60, currentBoard) & 2) &&\r\n              !(inDanger(59, currentBoard) & 2) &&\r\n              !(inDanger(58, currentBoard) & 2)\r\n            )\r\n          case 5:\r\n            return (\r\n              !(inDanger(60, currentBoard) & 2) &&\r\n              !(inDanger(61, currentBoard) & 2) &&\r\n              !(inDanger(62, currentBoard) & 2)\r\n            )\r\n          case 6:\r\n            return (\r\n              !(inDanger(4, currentBoard) & 1) &&\r\n              !(inDanger(3, currentBoard) & 1) &&\r\n              !(inDanger(2, currentBoard) & 1)\r\n            )\r\n          case 7:\r\n            return (\r\n              !(inDanger(4, currentBoard) & 1) &&\r\n              !(inDanger(5, currentBoard) & 1) &&\r\n              !(inDanger(6, currentBoard) & 1)\r\n            )\r\n          default:\r\n            break\r\n        }\r\n        const position =\r\n          move[3] >= 8\r\n            ? executeMove(move[0], move[1], move[2], move[3] - 7)\r\n            : executeMove(move[0], move[1], move[2], move[3])\r\n        const wKing = position.pieces[12]\r\n        const bKing = position.pieces[28]\r\n        if (inDanger(wKing, position.board) & 2 && turn) return false\r\n        else if (inDanger(bKing, position.board) & 1 && !turn) return false\r\n        else return true\r\n      })\r\n    },\r\n    [currentBoard, turn, executeMove, inDanger]\r\n  )\r\n\r\n  //get squares available to the piece at current square\r\n  const showLegalSquares = useCallback(\r\n    (target: number) => {\r\n      const p = pieceStates.indexOf(target)\r\n      let legals = Array(64).fill(0)\r\n      if (p >= 0) {\r\n        const moves = trimMoves(generateMoves(p))\r\n        for (const move of moves) {\r\n          legals[move[2]] = move[3]\r\n        }\r\n      }\r\n      return legals\r\n    },\r\n    [pieceStates, generateMoves, trimMoves]\r\n  )\r\n\r\n  const checkEndGame = useMemo(() => {\r\n    let allMovesAvailable = 0\r\n    for (let i = 0; i < 32; ++i) {\r\n      allMovesAvailable += trimMoves(generateMoves(i)).length\r\n    }\r\n    if (allMovesAvailable === 0) return 1\r\n\r\n    let repeat = 0\r\n    for (let hashedMove of history) {\r\n      if (\r\n        history[history.length - 1][0] !== hashedMove[0] ||\r\n        history[history.length - 1][1] !== hashedMove[1]\r\n      ) {\r\n        continue\r\n      } else repeat++\r\n    }\r\n    if (repeat >= 3) return 2\r\n    if (halfClock >= 50) return 3\r\n    return 0\r\n  }, [halfClock, history, trimMoves, generateMoves])\r\n\r\n  //just handle clicking a square\r\n  const handleClick = useCallback(\r\n    (i: number) => {\r\n      if (promotion.square >= 0) return //promoting, board locked\r\n      if (gameState)\r\n        //game state > 0 is game over\r\n        return\r\n      const squares = currentBoard\r\n      if (\r\n        selected === -1 || //haven't clicked\r\n        selected === i || //clicked the same square\r\n        squares[selected] === null || //clicked an empty square\r\n        legalMoves[i] === 0 //clicked an illegal square\r\n      ) {\r\n        setLegalMoves(showLegalSquares(i))\r\n        setSelected(i)\r\n      } else {\r\n        const p = pieceStates.indexOf(selected)\r\n        const position = realizeMove(p, selected, i, legalMoves[i]) //move from selected to current square\r\n        setHalfClock((halfClock) =>\r\n          currentBoard[i] === \"\\u2659\" || currentBoard[i] === \"\\u265f\"\r\n            ? 0\r\n            : halfClock + 1\r\n        )\r\n        setSelected(-1)\r\n        setCurrentBoard(position.board)\r\n        setColor(position.colors)\r\n        setPieceStates(position.pieces)\r\n        setCastleAvailable(position.castle)\r\n        setEnPassantSquare(position.enPassant)\r\n        setPromotion(position.promotion)\r\n        setLegalMoves(Array(64).fill(0))\r\n        setTurn(!turn)\r\n      }\r\n    },\r\n    [\r\n      selected,\r\n      promotion,\r\n      gameState,\r\n      currentBoard,\r\n      legalMoves,\r\n      turn,\r\n      pieceStates,\r\n      realizeMove,\r\n      showLegalSquares,\r\n    ]\r\n  )\r\n\r\n  const handleClickPromote = useCallback(\r\n    (piece: keyof typeof data) => {\r\n      const promoting = promotion.square\r\n      const board = currentBoard\r\n      board[promoting] = piece\r\n      setCurrentBoard(board.slice())\r\n      setPromotion({ square: -1, piece: null })\r\n    },\r\n\r\n    [currentBoard, promotion]\r\n  )\r\n\r\n  const renderSquare = useCallback(\r\n    (i: number) => {\r\n      const legal = !(legalMoves[i] === 0)\r\n      //processing for square color\r\n      let color = \"\"\r\n      if (selected === i) color = \"#2f2\"\r\n      if (((i & 7) + (i >> 3)) % 2 === 1) {\r\n        //checkerboard pattern\r\n        if (selected !== i) color = \"#7d8796\"\r\n        else color = \"#0d0\"\r\n        if (legal) color = \"#bbbb00\"\r\n      } else if (legal) color = \"#ffff00\"\r\n      const wKing = pieceStates[12]\r\n      const bKing = pieceStates[28]\r\n      if (\r\n        (wKing === i && inDanger(wKing, currentBoard) & 2 && turn) ||\r\n        (bKing === i && inDanger(bKing, currentBoard) & 1 && !turn)\r\n      )\r\n        color = \"#f44\"\r\n      return (\r\n        <td key={i}>\r\n          <Square\r\n            value={currentBoard[i]}\r\n            color={color}\r\n            onClick={() => handleClick(i)}\r\n          />\r\n        </td>\r\n      )\r\n    },\r\n    [\r\n      selected,\r\n      legalMoves,\r\n      pieceStates,\r\n      currentBoard,\r\n      turn,\r\n      inDanger,\r\n      handleClick,\r\n    ]\r\n  )\r\n\r\n  const renderPromoteSquare = useCallback(\r\n    (i: keyof typeof data) => {\r\n      if (promotion.square < 0) return null //only visible for promotion\r\n      if ((data[i].color === 2) !== turn) return null //show the right color\r\n      return (\r\n        <td key={i}>\r\n          <Square\r\n            value={i}\r\n            color={\"#fff\"}\r\n            onClick={() => handleClickPromote(i)}\r\n          />\r\n        </td>\r\n      )\r\n    },\r\n    [promotion, turn, handleClickPromote]\r\n  )\r\n\r\n  useEffect(() => setGameState(checkEndGame), [checkEndGame])\r\n\r\n  const render = useMemo(() => {\r\n    const player = \"Next player: \" + (turn ? \"White\" : \"Black\")\r\n    let gameOverStatus = null\r\n    if (gameState === 1) {\r\n      const wKing = pieceStates[12]\r\n      const bKing = pieceStates[28]\r\n      if (inDanger(wKing, currentBoard) & 2 && turn)\r\n        gameOverStatus = \"Black wins\"\r\n      else if (inDanger(bKing, currentBoard) & 1 && !turn)\r\n        gameOverStatus = \"White wins\"\r\n      else gameOverStatus = \"Stalemate\"\r\n    } else if (gameState === 2) gameOverStatus = \"Draw by 3-fold repetition\"\r\n    else if (gameState === 3) gameOverStatus = \"Draw by inactivity\"\r\n\r\n    const squares = []\r\n    for (let i = 0; i < 8; i++) {\r\n      const row = []\r\n      for (let j = 0; j < 8; j++) {\r\n        row.push(renderSquare(i * 8 + j))\r\n      }\r\n      const fullRow = (\r\n        <tr className=\"board-row\" key={8 - i}>\r\n          <td>\r\n            <ReadOnlySquare value={String(8 - i)} />\r\n          </td>\r\n          {row}\r\n          <td>\r\n            <ReadOnlySquare value={String(8 - i)} />\r\n          </td>\r\n        </tr>\r\n      )\r\n      squares.push(fullRow)\r\n    }\r\n    const columnChars = \" abcdefgh\\t\"\r\n    const columns = []\r\n    for (const c of columnChars) {\r\n      const cSquare = (\r\n        <td key={c}>\r\n          <ReadOnlySquare value={c} />\r\n        </td>\r\n      )\r\n      columns.push(cSquare)\r\n    }\r\n\r\n    const promotePieces = []\r\n    for (let i = 0; i < 3; ++i) {\r\n      const align = (\r\n        <td key={i}>\r\n          <ReadOnlySquare value={\" \"} />\r\n        </td>\r\n      )\r\n      promotePieces.push(align)\r\n    }\r\n    //promotion order is from most to least common\r\n    //white promoting\r\n    promotePieces.push(renderPromoteSquare(\"\\u2655\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u2658\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u2656\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u2657\"))\r\n    //black promoting\r\n    promotePieces.push(renderPromoteSquare(\"\\u265b\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u265e\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u265c\"))\r\n    promotePieces.push(renderPromoteSquare(\"\\u265d\"))\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"status\">{player}</div>\r\n        <table className=\"board\" style={{ borderCollapse: \"collapse\" }}>\r\n          <tbody>\r\n            <tr>{columns}</tr>\r\n            {squares}\r\n            <tr>{columns}</tr>\r\n          </tbody>\r\n        </table>\r\n        <table>\r\n          <tbody>\r\n            <tr>{promotePieces}</tr>\r\n          </tbody>\r\n        </table>\r\n        <div className=\"gameOver\">{gameOverStatus}</div>\r\n      </div>\r\n    )\r\n  }, [\r\n    currentBoard,\r\n    pieceStates,\r\n    gameState,\r\n    turn,\r\n    renderSquare,\r\n    renderPromoteSquare,\r\n    inDanger,\r\n  ])\r\n  return render\r\n}\r\n\r\nconst Game = () => (\r\n  <div className=\"game\">\r\n    <div className=\"game-board\">\r\n      <Board />\r\n    </div>\r\n    <div className=\"game-info\">\r\n      <div>{/* status */}</div>\r\n      <ol>{/* TODO */}</ol>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement)\r\nroot.render(\r\n  <React.StrictMode>\r\n    <Game />\r\n  </React.StrictMode>\r\n)\r\n"],"sourceRoot":""}